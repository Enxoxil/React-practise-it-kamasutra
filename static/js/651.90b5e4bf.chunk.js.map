{"version":3,"file":"static/js/651.90b5e4bf.chunk.js","mappings":"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","sources":["components/Profile/ProfileStatusWithHooks.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true);\r\n    };\r\n    const deactivateMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    };\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    };\r\n    return (\r\n        <div>\r\n            {!editMode ? (\r\n                <div>\r\n                    <span onDoubleClick={activateMode}>\r\n                        {props.status || \"No status\"}\r\n                    </span>\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <input\r\n                        onChange={onStatusChange}\r\n                        onBlur={deactivateMode}\r\n                        value={status}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from \"react\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks.jsx\";\r\nimport Preloader from \"../common/preloader/Preloader.jsx\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\nimport {\r\n    required,\r\n    maxLengthCreator,\r\n} from \"../../utils/validators/validator.js\";\r\nimport { Textarea } from \"../common/FormsControls/FormsControls.jsx\";\r\n\r\nlet maxLength5 = maxLengthCreator(5);\r\n\r\nconst Profile = (props) => {\r\n    if (!props.profile) {\r\n        return <Preloader />;\r\n    }\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    };\r\n    let postsElements = props.posts.map((p) => (\r\n        <Post message={p.message} likesCount={p.likesCount} />\r\n    ));\r\n    return (\r\n        <>\r\n            <img src={props.profile.photos.large} />\r\n            <ProfileStatusWithHooks\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n            />\r\n            \r\n            <div>Обо мне: {props.profile.aboutMe}</div>\r\n            <h4>My posts</h4>\r\n            <AddNewPostFormRedux onSubmit={onAddPost} />\r\n            <div>{postsElements}</div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field\r\n                        component={Textarea}\r\n                        name={\"newPostText\"}\r\n                        validate={[required, maxLength5]}\r\n                        placeholder=\"Post message\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button>Add post</button>\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <>\r\n            <div>Text: {props.message}</div>\r\n            <div>Likes: {props.likesCount}</div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst AddNewPostFormRedux = reduxForm({ form: \"ProfileAddNewPostForm\" })(\r\n    AddNewPostForm\r\n);\r\n\r\n\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile.jsx\";\r\nimport {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    addPost,\r\n} from \"../../redux/profile-reducer.js\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            // Следующий код ай ай ай это редирект через js \r\n            if(!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Profile\r\n                    {...this.props}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    addPost={this.props.addPost}\r\n                    posts={this.props.posts}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    posts: state.profilePage.posts,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        getUserProfile,\r\n        getStatus,\r\n        updateStatus,\r\n        addPost,\r\n    }),\r\n    withRouter\r\n    // withAuthRedirect\r\n)(ProfileContainer);\r\n"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","onBlur","updateStatus","onDoubleClick","maxLength5","maxLengthCreator","Post","message","likesCount","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","validate","required","placeholder","profile","Preloader","postsElements","posts","map","p","src","photos","large","aboutMe","values","addPost","newPostText","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","React","compose","connect","state","profilePage","auth","isAuth","withRouter"],"sourceRoot":""}